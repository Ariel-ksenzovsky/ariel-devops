pipeline {
    agent any

    environment {
        // Define environment variables for paths
        SQL_FILE_PATH = '/tmp/init.sql'  // Set a path with appropriate permissions
        DB_PASSWORD = credentials('mysql_root')
        DOCKER_TOKEN_ID = 'docker-hub-token' // Replace with your secret text ID
        build_num = "${BUILD_NUMBER}"
    }

    triggers {
        pollSCM('* * * * *')  // poll SCM every minute
    }

    stages {
        stage('Cleanup') {
            steps {
                sh '''
                docker stop docker-gif-app || echo "Container not running"
                docker rm docker-gif-app || echo "Container already removed"
                rm -rf ariel-devops || true
                git clone https://github.com/Ariel-ksenzovsky/ariel-devops.git
                cd ariel-devops/Flask/mysql-task
                pwd
                docker compose down || true
                docker rmi $(docker images -q) -f || true
                '''
            }
        }

        stage('set the environment variables') {
            steps {
                sh '''
                pwd
                id
                cd ariel-devops/Flask/mysql-task
                pwd
                cp /home/arielk/.env /var/lib/jenkins/workspace/test1/ariel-devops/Flask/mysql-task
                '''
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    // Use secret text to log in
                    withCredentials([string(credentialsId: env.DOCKER_TOKEN_ID, variable: 'DOCKER_TOKEN')]) {
                        sh """
                        echo "$DOCKER_TOKEN" | docker login -u arielk2511 --password-stdin
                        """
                    }
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh '''
                    docker build -t arielk2511/star_meme_sql_compose:latest .
                    docker build -t arielk2511/star_meme_sql_compose:2.0.${build_num} .
                    docker push arielk2511/star_meme_sql_compose:latest
                    docker push arielk2511/star_meme_sql_compose:2.0.${build_num}
                    '''
                }
            }
        }

        stage('Prepare SQL File') {
            steps {
                sh '''
                # Copy init.sql to /tmp (ensure permissions)
                cp ariel-devops/Flask/mysql-task/init.sql ${SQL_FILE_PATH}
                '''
            }
        }

        stage('Run') {
            steps {
                sh '''
                docker ps -a  # List containers to check if there's a conflict
                id
                pwd
                cd ariel-devops/Flask/mysql-task
                pwd
                docker compose up -d
                docker ps  # Verify if the container is running
                '''
            }
        }

        stage('Test') {
            steps {
                // Wait for the container to start
                sh 'sleep 30'
                // Check logs for errors
                sh '''
                if ! docker logs docker-gif-app; then
                    echo "Container logs check failed"
                    exit 1
                fi
                '''
                // Test the app
                sh '''
                if ! curl -f http://localhost:5000; then
                    echo "App is not reachable."
                    docker logs docker-gif-app
                    exit 1
                fi
                '''
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying...'
                sh '''
                pwd
                cd ariel-devops/Flask/mysql-task
                pwd
                docker compose up -d
                '''
            }
        }
    }

    post {
        always {
            // Clean up by removing the copied SQL file after execution
            sh '''
            rm -f ${SQL_FILE_PATH}
            '''
        }
    }
}
